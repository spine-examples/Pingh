/*
 * Copyright 2024, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import io.gitlab.arturbosch.detekt.Detekt
import org.jetbrains.dokka.DokkaConfiguration
import org.jetbrains.dokka.base.DokkaBase
import org.jetbrains.dokka.base.DokkaBaseConfiguration
import org.jetbrains.dokka.gradle.DokkaTask
import java.time.LocalDate

buildscript {
    dependencies {
        // Required to customize HTML documents generated by Dokka.
        classpath("org.jetbrains.dokka:dokka-base:1.9.20")
    }
}

plugins {
    kotlin("jvm").version("1.9.20")
    id("org.jetbrains.compose").version("1.6.11")
    id("io.gitlab.arturbosch.detekt").version("1.23.6")
    id("org.jetbrains.dokka").version("1.9.20")
}

/**
 * The path to the parent project.
 *
 * This project is nested standalone.
 * Its parent contains project's version and `Detekt` configs.
 */
private val parentRootDir = rootDir.parent

apply(from = "$parentRootDir/version.gradle.kts")

/**
 * The last version of the Pingh project.
 */
private val pinghVersion = extra["pinghVersion"]!!

private val jvmVersion = 11

group = "io.spine.example.pingh"
version = pinghVersion

repositories {
    mavenLocal()
    mavenCentral()
    google()
    maven("https://maven.pkg.jetbrains.space/public/p/compose/dev")
    maven("https://spine.mycloudrepo.io/public/repositories/releases")
}

kotlin {
    jvmToolchain(jvmVersion)
    explicitApi()
}

configurations {
    all {
        resolutionStrategy {
            force("com.google.guava:guava:31.1-jre")
        }
    }
}

dependencies {
    implementation("androidx.compose.runtime:runtime:1.6.0")
    implementation(compose.desktop.currentOs)
    implementation("io.spine.examples.pingh:client:$pinghVersion")
}

compose.desktop {
    application {
        mainClass = "io.spine.examples.pingh.desktop.MainKt"
    }
}

/**
 * After applying, Detekt is configured to use
 * `${parentRootDir}/config/quality/detekt-config.yml` file.
 */
detekt {
    buildUponDefaultConfig = true
    config.from(files("$parentRootDir/config/quality/detekt-config.yml"))
}

/**
 * Specifies that Detekt generates only HTML reports.
 */
tasks.withType<Detekt>().configureEach {
    reports {
        html.required.set(true)
        xml.required.set(false)
        txt.required.set(false)
        sarif.required.set(false)
        md.required.set(false)
    }
}

/**
 * Configures [DokkaTask]s to accept Kotlin files and customizes output files.
 */
tasks.withType<DokkaTask>().configureEach {
    dokkaSourceSets.configureEach {
        /**
         * Configures links to the external Java documentation.
         */
        jdkVersion.set(jvmVersion)

        skipEmptyPackages.set(true)

        documentedVisibilities.set(
            setOf(
                DokkaConfiguration.Visibility.PUBLIC,
                DokkaConfiguration.Visibility.PROTECTED
            )
        )

        /**
         * Dokka Base plugin allows to set a few properties to customize the output:
         *
         * - `separateInheritedMembers` when set to `true`, creates a separate tab in
         * type-documentation for inherited members;
         * - `footerMessage` property to specify footer text in page generated by Dokka.
         *
         * @see <a href="https://kotlinlang.org/docs/dokka-html.html#customize-assets">
         *  Dokka modifying frontend assets</a>
         */
        pluginConfiguration<DokkaBase, DokkaBaseConfiguration> {
            separateInheritedMembers = true
            footerMessage = "Copyright ${LocalDate.now().year}, TeamDev"
        }
    }

    /**
     * Specifies output directory for documents generated by the Dokka.
     */
    val buildDirectory = layout.buildDirectory.asFile.get().path
    outputDirectory.set(file("$buildDirectory/docs/dokkaKotlin"))
}
