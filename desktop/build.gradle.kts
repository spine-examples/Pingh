import io.gitlab.arturbosch.detekt.Detekt
import org.jetbrains.dokka.DokkaConfiguration
import org.jetbrains.dokka.base.DokkaBase
import org.jetbrains.dokka.base.DokkaBaseConfiguration
import org.jetbrains.dokka.gradle.DokkaTask
import java.time.LocalDate

buildscript {
    dependencies {
        classpath("org.jetbrains.dokka:dokka-base:1.8.10")
    }
}

plugins {
    kotlin("jvm").version("1.9.20")
    id("org.jetbrains.compose").version("1.6.0")
    id("io.gitlab.arturbosch.detekt").version("1.23.3")
    id("org.jetbrains.dokka").version("1.8.10")
}

group = "io.spine.example.pingh"
version = "0.1"

repositories {
    mavenLocal()
    mavenCentral()
    google()
    maven("https://maven.pkg.jetbrains.space/public/p/compose/dev")
    maven("https://spine.mycloudrepo.io/public/repositories/releases")
}

kotlin {
    jvmToolchain(11)
    explicitApi()
}

configurations {
    all {
        resolutionStrategy {
            force("com.google.guava:guava:31.1-jre")
        }
    }
}

dependencies {
    implementation("androidx.compose.runtime:runtime:1.6.0")
    implementation(compose.desktop.currentOs)
    implementation("io.spine.examples.pingh:client:0.1")
}

compose.desktop {
    application {
        mainClass = "io.spine.examples.pingh.desktop.MainKt"
    }
}

detekt {
    buildUponDefaultConfig = true
    // Document it
    val configDir = rootDir.path.dropLast("/desktop".length)
    config.from(files("$configDir/config/quality/detekt-config.yml"))
}

tasks {
    withType<Detekt>().configureEach {
        reports {
            html.required.set(true) // Only HTML report is generated.
            xml.required.set(false)
            txt.required.set(false)
            sarif.required.set(false)
            md.required.set(false)
        }
    }
}

tasks.withType<DokkaTask>().configureEach {
    dokkaSourceSets.configureEach {
        /**
         * Configures links to the external Java documentation.
         */
        jdkVersion.set(11)

        skipEmptyPackages.set(true)

        documentedVisibilities.set(
            setOf(
                DokkaConfiguration.Visibility.PUBLIC,
                DokkaConfiguration.Visibility.PROTECTED
            )
        )

        /**
         * Dokka Base plugin allows to set a few properties to customize the output:
         *
         * - `separateInheritedMembers` when set to `true`, creates a separate tab in
         * type-documentation for inherited members;
         * - `footerMessage` property to specify footer text in page generated by Dokka.
         *
         * @see <a href="https://kotlinlang.org/docs/dokka-html.html#customize-assets">
         *  Dokka modifying frontend assets</a>
         */
        pluginConfiguration<DokkaBase, DokkaBaseConfiguration> {
            separateInheritedMembers = true
            footerMessage = "Copyright ${LocalDate.now().year}, TeamDev"
        }
    }

    outputDirectory.set(layout.buildDirectory.file("/docs/dokkaKotlin").get().asFile)
}
