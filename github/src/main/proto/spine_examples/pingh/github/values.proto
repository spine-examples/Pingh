/*
 * Copyright 2024, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine_examples.pingh.github;

import "spine/options.proto";

option (type_url_prefix) = "type.pingh.spine.io";
option java_package = "io.spine.examples.pingh.github";
option java_outer_classname = "ValuesProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "spine/net/url.proto";
import "spine_examples/pingh/github/identifiers.proto";

// The username used in the GitHub account.
message Username {

    // A valid GitHub username must:
    //
    // - Consist of alphanumeric characters and dashes ('-');
    // - Not have consecutive dashes or dashes at the beginning or end.
    //
    string value = 1 [(required) = true,
        (pattern).regex = "^[a-zA-Z\\d](?:-(?=[a-zA-Z\\d])|[a-zA-Z\\d])*$"];
}

// The token issued by GitHub after authentication.
//
// Used to obtain information on behalf of the user.
//
message PersonalAccessToken {

    string value = 1 [(required) = true];
}

// The GitHub user information.
message User {

    // The unique username that identifies the user.
    Username username = 1 [(required) = true];

    // The URL of the user's avatar.
    spine.net.Url avatar_url = 2 [(required) = true];
}

// The mention of a user on GitHub.
message Mention {

    // The global ID of the GitHub item in which this mention is created.
    NodeId id = 1 [(required) = true];

    // The user who created the mention.
    User author = 2 [(required) = true];

    // The title of the GitHub item in which the mention created.
    string title = 3 [(required) = true];

    // Time when the user was mentioned.
    google.protobuf.Timestamp when_mentioned = 4 [(required) = true];

    // The URL of the GitHub item where the user was mentioned.
    spine.net.Url url = 5 [(required) = true];

    // The repository where the user was mentioned.
    Repo where_mentioned = 6 [(required) = true];
}

// The verification code that displays so that the user can enter the code in a browser.
//
// It is used to allow the user to confirm login to the Pingh application via GitHub.
//
message UserCode {

    // A valid GitHub user code consist of 8 alphanumeric characters with a hyphen in the middle.
    string value = 1 [(required) = true, (pattern).regex = "^[a-zA-Z\\d]{4}-[a-zA-Z\\d]{4}$"];
}

// A verification code that is used to verify the device.
message DeviceCode {

    // A valid GitHub device code is 40 characters long.
    string value = 1 [(required) = true, (pattern).regex = "^[a-zA-Z\\d]{40}$"];
}

// The token to renew the `PersonalAccessToken` when it expires.
message RefreshToken {

    // A valid GitHub refresh token starts with 'ghr_'.
    string value = 1 [(required) = true, (pattern).regex = "^ghr_.+$"];
}

// The client secret of a GitHub App.
//
// This secret is created and issued by GitHub when a GitHub App is set up.
// The client secret is used in the authentication flow to refresh access tokens.
//
message ClientSecret {

    string value = 1 [(required) = true];
}

// A GitHub organization information.
message Organization {

    // An organization name.
    OrganizationLogin login = 1 [(required) = true];
}

// An unique name of the organization on GitHub.
message OrganizationLogin {

    // A valid GitHub organization login must:
    //
    // - Consist of alphanumeric characters and dashes ('-');
    // - Not have consecutive dashes or dashes at the beginning or end.
    //
    string value = 1 [(required) = true,
        (pattern).regex = "^[a-zA-Z\\d](?:-(?=[a-zA-Z\\d])|[a-zA-Z\\d])*$"];
}

// A GitHub repository information.
message Repo {

    // The name of the GitHub repository.
    //
    // The valid repository name can only contain letters, digits,
    // and the characters '.', '-', and '_'.
    //
    string name = 1 [(required) = true, (pattern).regex = "^[a-zA-Z0-9._-]+$"];

    // The name of user or organization which is owner of this repository.
    //
    // A valid names of organizations and users must:
    //
    // - Consist of alphanumeric characters and dashes ('-');
    // - Not have consecutive dashes or dashes at the beginning or end.
    //
    string owner = 2 [(required) = true,
        (pattern).regex = "^[a-zA-Z\\d](?:-(?=[a-zA-Z\\d])|[a-zA-Z\\d])*$"];
}

// Groups of organization members that represent a company's or group's structure,
// with cascading access permissions and mention capabilities.
//
message Team {

    // The team's name.
    string name = 1 [(required) = true];

    // Tht unique identifier for the team slug within the organization,
    // generated by GitHub based on the team name.
    //
    // A valid team slug must:
    //
    // - Consists of lowercase alphanumeric characters and dashes ('-').;
    // - Not have consecutive dashes or dashes at the beginning or end.
    //
    string slug = 2 [(required) = true,
        (pattern).regex = "^[a-z\\d](?:-(?=[a-z\\d])|[a-z\\d])*$"];

    // The organization which is owner of this team.
    Organization org = 3 [(required) = true];
}

// A GitHub app that contains a set of secrets required to make requests
// on its behalf during the authentication flow.
//
message GitHubApp {

    // The client ID of a GitHub App.
    //
    // Used in the authentication flow to generate personal access tokens
    // on behalf of the GitHub App.
    //
    ClientId id = 1 [(required) = true];

    // The client secret of a GitHub App.
    //
    // Used in the authentication flow to refresh access tokens.
    //
    ClientSecret secret = 2 [(required) = true];
}
